// <auto-generated />
using System;
using BookshelfAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookshelfAPI.Data.Migrations
{
    [DbContext(typeof(BookshelfDbContext))]
    [Migration("20211120223301_BookDataType")]
    partial class BookDataType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookshelfAPI.Data.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("datetime");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OrderInSeries")
                        .HasColumnType("int");

                    b.Property<string>("OriginalTitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ReleaseYearOnly")
                        .HasColumnType("int");

                    b.Property<int?>("Series_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Series_Id" }, "ISPARTOFSERIES_FK");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.BookAuthor", b =>
                {
                    b.Property<int>("Author_Id")
                        .HasColumnType("int");

                    b.Property<int>("Book_Id")
                        .HasColumnType("int");

                    b.HasKey("Author_Id", "Book_Id")
                        .HasName("PK_BOOKAUTHOR");

                    b.HasIndex(new[] { "Book_Id" }, "AUTHOROF_FK");

                    b.HasIndex(new[] { "Author_Id" }, "WRITTENBY_FK");

                    b.ToTable("BookAuthor");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.BookEdition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Publisher_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Publisher_Id" }, "BYPUBLISHER_FK");

                    b.ToTable("BookEdition");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.BookInReadingChallange", b =>
                {
                    b.Property<int>("Book_Id")
                        .HasColumnType("int");

                    b.Property<int>("BookIssue_Id")
                        .HasColumnType("int");

                    b.Property<int>("ReadingChallange_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("FinishedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("UserComment")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.HasKey("Book_Id", "BookIssue_Id", "ReadingChallange_Id")
                        .HasName("PK_BOOKINREADINGCHALLANGE");

                    b.HasIndex(new[] { "ReadingChallange_Id" }, "BOOKINCHALANGE_FK");

                    b.HasIndex(new[] { "Book_Id", "BookIssue_Id" }, "CHALLANGEISSUE_FK");

                    b.ToTable("BookInReadingChallange");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.BookIssue", b =>
                {
                    b.Property<int>("Book_Id")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ISBN")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ISBN13")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<bool>("IsHardcover")
                        .HasColumnType("bit");

                    b.Property<int>("Language_Id")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("Publisher_Id")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<int>("Tirage")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Book_Id", "Id")
                        .HasName("PK_BOOKISSUE");

                    b.HasIndex(new[] { "Book_Id" }, "ISSUEOF_FK");

                    b.HasIndex(new[] { "Language_Id" }, "LANGUAGEOFISSUE_FK");

                    b.HasIndex(new[] { "Publisher_Id" }, "PUBLISHEDBY_FK");

                    b.ToTable("BookIssue");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.BookIssueInEdition", b =>
                {
                    b.Property<int>("Book_Id")
                        .HasColumnType("int");

                    b.Property<int>("BookIssue_id")
                        .HasColumnType("int");

                    b.Property<int>("Edition_Id")
                        .HasColumnType("int");

                    b.Property<int>("OrderInEdition")
                        .HasColumnType("int");

                    b.HasKey("Book_Id", "BookIssue_id", "Edition_Id")
                        .HasName("PK_BOOKISSUEINEDITION");

                    b.HasIndex(new[] { "Edition_Id" }, "EDITIONOFISSE_FK");

                    b.HasIndex(new[] { "Book_Id", "BookIssue_id" }, "ISSUEINEDITION_FK");

                    b.ToTable("BookIssueInEdition");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.BookOnBookshelf", b =>
                {
                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BookShelf_Id")
                        .HasColumnType("int");

                    b.Property<int>("Book_Id")
                        .HasColumnType("int");

                    b.Property<int>("BookIssue_Id")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.HasKey("User_Id", "BookShelf_Id", "Book_Id", "BookIssue_Id")
                        .HasName("PK_BOOKONBOOKSHELF");

                    b.HasIndex(new[] { "Book_Id", "BookIssue_Id" }, "BOOKONBOOKSHELF_FK");

                    b.HasIndex(new[] { "User_Id", "BookShelf_Id" }, "ONBOOKSHELF_FK");

                    b.ToTable("BookOnBookshelf");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.BookTag", b =>
                {
                    b.Property<int>("Tag_Id")
                        .HasColumnType("int");

                    b.Property<int>("Book_Id")
                        .HasColumnType("int");

                    b.HasKey("Tag_Id", "Book_Id")
                        .HasName("PK_BOOKTAG");

                    b.HasIndex(new[] { "Tag_Id" }, "BOOKHASTAG_FK");

                    b.HasIndex(new[] { "Book_Id" }, "TAGGEDBOOKIS_FK");

                    b.ToTable("BookTag");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.BookshelfUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.CommentReaction", b =>
                {
                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Book_Id")
                        .HasColumnType("int");

                    b.Property<int>("BookIssue_Id")
                        .HasColumnType("int");

                    b.Property<string>("Review_User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentAuthor_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Like")
                        .HasColumnType("bit");

                    b.HasKey("User_Id", "Book_Id", "BookIssue_Id", "Review_User_Id", "CommentAuthor_Id")
                        .HasName("PK_COMMENTREACTION");

                    b.HasIndex(new[] { "User_Id" }, "REACTIONONCOMMENTBY_FK");

                    b.HasIndex(new[] { "Book_Id", "BookIssue_Id", "Review_User_Id", "CommentAuthor_Id" }, "REACTIONONCOMMENT_FK");

                    b.ToTable("CommentReaction");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.CredentialsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("CredentialsHistory");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.CurrentlyReading", b =>
                {
                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Book_Id")
                        .HasColumnType("int");

                    b.Property<int>("BookIssue_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("PagesRead")
                        .HasColumnType("int");

                    b.HasKey("User_Id", "Book_Id", "BookIssue_Id")
                        .HasName("PK_CURRENTLYREADING");

                    b.HasIndex(new[] { "Book_Id", "BookIssue_Id" }, "CURRENTLYREADINGBOOK_FK");

                    b.HasIndex(new[] { "User_Id" }, "CURRENTLYREADINGBY_FK");

                    b.ToTable("CurrentlyReading");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LocalizationCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.HasKey("Id");

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.Read", b =>
                {
                    b.Property<int>("Book_Id")
                        .HasColumnType("int");

                    b.Property<int>("BookIssue_Id")
                        .HasColumnType("int");

                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FinishedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Book_Id", "BookIssue_Id", "User_Id")
                        .HasName("PK_READ");

                    b.HasIndex(new[] { "Book_Id", "BookIssue_Id" }, "READBOOK_FK");

                    b.HasIndex(new[] { "User_Id" }, "READBY_FK");

                    b.ToTable("Read");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.ReadingChallange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BooksPledged")
                        .HasColumnType("int");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Year_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Year_Id" }, "CHALLANGEFORYEAR_FK");

                    b.HasIndex(new[] { "User_Id" }, "OFUSER_FK");

                    b.ToTable("ReadingChallange");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.Review", b =>
                {
                    b.Property<int>("Book_Id")
                        .HasColumnType("int");

                    b.Property<int>("BookIssue_Id")
                        .HasColumnType("int");

                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("Review");

                    b.HasKey("Book_Id", "BookIssue_Id", "User_Id")
                        .HasName("PK_REVIEW");

                    b.HasIndex(new[] { "User_Id" }, "POSTEDBYUSER_FK");

                    b.HasIndex(new[] { "Book_Id", "BookIssue_Id" }, "REVIEWOF_FK");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.ReviewComment", b =>
                {
                    b.Property<int>("Book_Id")
                        .HasColumnType("int");

                    b.Property<int>("BookIssue_Id")
                        .HasColumnType("int");

                    b.Property<string>("Review_User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentAuthor_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.HasKey("Book_Id", "BookIssue_Id", "Review_User_Id", "CommentAuthor_Id")
                        .HasName("PK_REVIEWCOMMENT");

                    b.HasIndex(new[] { "CommentAuthor_Id" }, "COMMENTBY_FK");

                    b.HasIndex(new[] { "Book_Id", "BookIssue_Id", "Review_User_Id" }, "COMMENTON_FK");

                    b.ToTable("ReviewComment");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.ReviewReaction", b =>
                {
                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Book_Id")
                        .HasColumnType("int");

                    b.Property<int>("BookIssue_Id")
                        .HasColumnType("int");

                    b.Property<string>("Review_User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Like")
                        .HasColumnType("bit");

                    b.HasKey("User_Id", "Book_Id", "BookIssue_Id", "Review_User_Id")
                        .HasName("PK_REVIEWREACTION");

                    b.HasIndex(new[] { "User_Id" }, "REACTEDONREVIEWBY_FK");

                    b.HasIndex(new[] { "Book_Id", "BookIssue_Id", "Review_User_Id" }, "REACTEDONREVIEW_FK");

                    b.ToTable("ReviewReaction");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.HasKey("Id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.UserBookShelf", b =>
                {
                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Descripton")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("Public")
                        .HasColumnType("bit");

                    b.HasKey("User_Id", "Id")
                        .HasName("PK_USERBOOKSHELF");

                    b.HasIndex(new[] { "User_Id" }, "BOOKSHELFBY_FK");

                    b.ToTable("UserBookShelf");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.WantToRead", b =>
                {
                    b.Property<int>("Book_Id")
                        .HasColumnType("int");

                    b.Property<int>("BookIsse_Id")
                        .HasColumnType("int");

                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Book_Id", "BookIsse_Id", "User_Id")
                        .HasName("PK_WANTTOREAD");

                    b.HasIndex(new[] { "Book_Id", "BookIsse_Id" }, "WANTTOREADBOOK_FK");

                    b.HasIndex(new[] { "User_Id" }, "WANTTOREADBY_FK");

                    b.ToTable("WantToRead");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.Year", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Year1")
                        .HasColumnType("int")
                        .HasColumnName("Year");

                    b.HasKey("Id");

                    b.ToTable("Year");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.Book", b =>
                {
                    b.HasOne("BookshelfAPI.Data.Models.Series", "Series")
                        .WithMany("Book")
                        .HasForeignKey("Series_Id")
                        .HasConstraintName("FK_BOOK_ISPARTOFS_SERIES");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.BookAuthor", b =>
                {
                    b.HasOne("BookshelfAPI.Data.Models.Author", "Author")
                        .WithMany("BookAuthor")
                        .HasForeignKey("Author_Id")
                        .HasConstraintName("FK_BOOKAUTH_WRITTENBY_AUTHOR")
                        .IsRequired();

                    b.HasOne("BookshelfAPI.Data.Models.Book", "Book")
                        .WithMany("BookAuthor")
                        .HasForeignKey("Book_Id")
                        .HasConstraintName("FK_BOOKAUTH_AUTHOROF_BOOK")
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.BookEdition", b =>
                {
                    b.HasOne("BookshelfAPI.Data.Models.Publisher", "Publisher")
                        .WithMany("BookEdition")
                        .HasForeignKey("Publisher_Id")
                        .HasConstraintName("FK_BOOKEDIT_BYPUBLISH_PUBLISHE")
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.BookInReadingChallange", b =>
                {
                    b.HasOne("BookshelfAPI.Data.Models.ReadingChallange", "ReadingChallange")
                        .WithMany("BookInReadingChallange")
                        .HasForeignKey("ReadingChallange_Id")
                        .HasConstraintName("FK_BOOKINRE_BOOKINCHA_READINGC")
                        .IsRequired();

                    b.HasOne("BookshelfAPI.Data.Models.BookIssue", "Book")
                        .WithMany("BookInReadingChallange")
                        .HasForeignKey("Book_Id", "BookIssue_Id")
                        .HasConstraintName("FK_BOOKINRE_CHALLANGE_BOOKISSU")
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("ReadingChallange");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.BookIssue", b =>
                {
                    b.HasOne("BookshelfAPI.Data.Models.Book", "Book")
                        .WithMany("BookIssue")
                        .HasForeignKey("Book_Id")
                        .HasConstraintName("FK_BOOKISSU_ISSUEOF_BOOK")
                        .IsRequired();

                    b.HasOne("BookshelfAPI.Data.Models.Language", "Language")
                        .WithMany("BookIssue")
                        .HasForeignKey("Language_Id")
                        .HasConstraintName("FK_BOOKISSU_LANGUAGEO_LANGUAGE")
                        .IsRequired();

                    b.HasOne("BookshelfAPI.Data.Models.Publisher", "Publisher")
                        .WithMany("BookIssue")
                        .HasForeignKey("Publisher_Id")
                        .HasConstraintName("FK_BOOKISSU_PUBLISHED_PUBLISHE")
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Language");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.BookIssueInEdition", b =>
                {
                    b.HasOne("BookshelfAPI.Data.Models.BookEdition", "Edition")
                        .WithMany("BookIssueInEdition")
                        .HasForeignKey("Edition_Id")
                        .HasConstraintName("FK_BOOKISSU_EDITIONOF_BOOKEDIT")
                        .IsRequired();

                    b.HasOne("BookshelfAPI.Data.Models.BookIssue", "Book")
                        .WithMany("BookIssueInEdition")
                        .HasForeignKey("Book_Id", "BookIssue_id")
                        .HasConstraintName("FK_BOOKISSU_ISSUEINED_BOOKISSU")
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Edition");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.BookOnBookshelf", b =>
                {
                    b.HasOne("BookshelfAPI.Data.Models.BookIssue", "Book")
                        .WithMany("BookOnBookshelf")
                        .HasForeignKey("Book_Id", "BookIssue_Id")
                        .HasConstraintName("FK_BOOKONBO_BOOKONBOO_BOOKISSU")
                        .IsRequired();

                    b.HasOne("BookshelfAPI.Data.Models.UserBookShelf", "UserBookShelf")
                        .WithMany("BookOnBookshelf")
                        .HasForeignKey("User_Id", "BookShelf_Id")
                        .HasConstraintName("FK_BOOKONBO_ONBOOKSHE_USERBOOK")
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("UserBookShelf");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.BookTag", b =>
                {
                    b.HasOne("BookshelfAPI.Data.Models.Book", "Book")
                        .WithMany("BookTag")
                        .HasForeignKey("Book_Id")
                        .HasConstraintName("FK_BOOKTAG_TAGGEDBOO_BOOK")
                        .IsRequired();

                    b.HasOne("BookshelfAPI.Data.Models.Tag", "Tag")
                        .WithMany("BookTag")
                        .HasForeignKey("Tag_Id")
                        .HasConstraintName("FK_BOOKTAG_BOOKHASTA_TAG")
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.BookshelfUser", b =>
                {
                    b.HasOne("BookshelfAPI.Data.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.CommentReaction", b =>
                {
                    b.HasOne("BookshelfAPI.Data.Models.ReviewComment", "ReviewComment")
                        .WithMany("CommentReaction")
                        .HasForeignKey("Book_Id", "BookIssue_Id", "Review_User_Id", "CommentAuthor_Id")
                        .HasConstraintName("FK_COMMENTR_REACTIONO_REVIEWCO")
                        .IsRequired();

                    b.Navigation("ReviewComment");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.CredentialsHistory", b =>
                {
                    b.HasOne("BookshelfAPI.Data.Models.BookshelfUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.CurrentlyReading", b =>
                {
                    b.HasOne("BookshelfAPI.Data.Models.BookIssue", "Book")
                        .WithMany("CurrentlyReading")
                        .HasForeignKey("Book_Id", "BookIssue_Id")
                        .HasConstraintName("FK_CURRENTL_CURRENTLY_BOOKISSU")
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.Read", b =>
                {
                    b.HasOne("BookshelfAPI.Data.Models.BookIssue", "Book")
                        .WithMany("Read")
                        .HasForeignKey("Book_Id", "BookIssue_Id")
                        .HasConstraintName("FK_READ_READBOOK_BOOKISSU")
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.ReadingChallange", b =>
                {
                    b.HasOne("BookshelfAPI.Data.Models.Year", "Year")
                        .WithMany("ReadingChallange")
                        .HasForeignKey("Year_Id")
                        .HasConstraintName("FK_READINGC_CHALLANGE_YEAR")
                        .IsRequired();

                    b.Navigation("Year");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.Review", b =>
                {
                    b.HasOne("BookshelfAPI.Data.Models.BookIssue", "Book")
                        .WithMany("Review")
                        .HasForeignKey("Book_Id", "BookIssue_Id")
                        .HasConstraintName("FK_REVIEW_REVIEWOF_BOOKISSU")
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.ReviewComment", b =>
                {
                    b.HasOne("BookshelfAPI.Data.Models.Review", "Review")
                        .WithMany("ReviewComment")
                        .HasForeignKey("Book_Id", "BookIssue_Id", "Review_User_Id")
                        .HasConstraintName("FK_REVIEWCO_COMMENTON_REVIEW")
                        .IsRequired();

                    b.Navigation("Review");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.ReviewReaction", b =>
                {
                    b.HasOne("BookshelfAPI.Data.Models.Review", "Review")
                        .WithMany("ReviewReaction")
                        .HasForeignKey("Book_Id", "BookIssue_Id", "Review_User_Id")
                        .HasConstraintName("FK_REVIEWRE_REACTEDON_REVIEW")
                        .IsRequired();

                    b.Navigation("Review");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.WantToRead", b =>
                {
                    b.HasOne("BookshelfAPI.Data.Models.BookIssue", "Book")
                        .WithMany("WantToRead")
                        .HasForeignKey("Book_Id", "BookIsse_Id")
                        .HasConstraintName("FK_WANTTORE_WANTTOREA_BOOKISSU")
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BookshelfAPI.Data.Models.BookshelfUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BookshelfAPI.Data.Models.BookshelfUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookshelfAPI.Data.Models.BookshelfUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BookshelfAPI.Data.Models.BookshelfUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.Author", b =>
                {
                    b.Navigation("BookAuthor");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.Book", b =>
                {
                    b.Navigation("BookAuthor");

                    b.Navigation("BookIssue");

                    b.Navigation("BookTag");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.BookEdition", b =>
                {
                    b.Navigation("BookIssueInEdition");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.BookIssue", b =>
                {
                    b.Navigation("BookInReadingChallange");

                    b.Navigation("BookIssueInEdition");

                    b.Navigation("BookOnBookshelf");

                    b.Navigation("CurrentlyReading");

                    b.Navigation("Read");

                    b.Navigation("Review");

                    b.Navigation("WantToRead");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.Language", b =>
                {
                    b.Navigation("BookIssue");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.Publisher", b =>
                {
                    b.Navigation("BookEdition");

                    b.Navigation("BookIssue");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.ReadingChallange", b =>
                {
                    b.Navigation("BookInReadingChallange");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.Review", b =>
                {
                    b.Navigation("ReviewComment");

                    b.Navigation("ReviewReaction");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.ReviewComment", b =>
                {
                    b.Navigation("CommentReaction");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.Series", b =>
                {
                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.Tag", b =>
                {
                    b.Navigation("BookTag");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.UserBookShelf", b =>
                {
                    b.Navigation("BookOnBookshelf");
                });

            modelBuilder.Entity("BookshelfAPI.Data.Models.Year", b =>
                {
                    b.Navigation("ReadingChallange");
                });
#pragma warning restore 612, 618
        }
    }
}
