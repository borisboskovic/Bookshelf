// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using BookshelfAPI.Data.Models;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

#nullable disable

namespace BookshelfAPI.Data
{
    public partial class BookshelfDbContext : IdentityDbContext<BookshelfUser>
    {
        private readonly IConfiguration _configuration;

        public BookshelfDbContext(IConfiguration configuration)
        {
            _configuration = configuration;
        }

        public BookshelfDbContext(DbContextOptions<BookshelfDbContext> options, IConfiguration configuration)
            : base(options)
        {
            _configuration = configuration;
        }

        public virtual DbSet<Author> Author { get; set; }
        public virtual DbSet<Book> Book { get; set; }
        public virtual DbSet<BookAuthor> BookAuthor { get; set; }
        public virtual DbSet<BookEdition> BookEdition { get; set; }
        public virtual DbSet<BookInReadingChallange> BookInReadingChallange { get; set; }
        public virtual DbSet<BookIssue> BookIssue { get; set; }
        public virtual DbSet<BookIssueInEdition> BookIssueInEdition { get; set; }
        public virtual DbSet<BookOnBookshelf> BookOnBookshelf { get; set; }
        public virtual DbSet<BookTag> BookTag { get; set; }
        public virtual DbSet<CommentReaction> CommentReaction { get; set; }
        public virtual DbSet<CurrentlyReading> CurrentlyReading { get; set; }
        public virtual DbSet<Language> Language { get; set; }
        public virtual DbSet<Publisher> Publisher { get; set; }
        public virtual DbSet<Read> Read { get; set; }
        public virtual DbSet<ReadingChallange> ReadingChallange { get; set; }
        public virtual DbSet<Review> Review { get; set; }
        public virtual DbSet<ReviewComment> ReviewComment { get; set; }
        public virtual DbSet<ReviewReaction> ReviewReaction { get; set; }
        public virtual DbSet<Series> Series { get; set; }
        public virtual DbSet<Tag> Tag { get; set; }
        public virtual DbSet<UserBookShelf> UserBookShelf { get; set; }
        public virtual DbSet<WantToRead> WantToRead { get; set; }
        public virtual DbSet<Year> Year { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                var connectionString = _configuration.GetConnectionString("Bookshelf");
                optionsBuilder.UseSqlServer(connectionString);
                optionsBuilder.EnableDetailedErrors();
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Author>(entity =>
            {
                entity.Property(e => e.ImageUrl).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Surname).IsUnicode(false);
            });

            modelBuilder.Entity<Book>(entity =>
            {
                entity.Property(e => e.OriginalTitle).IsUnicode(false);

                entity.HasOne(d => d.Series)
                    .WithMany(p => p.Book)
                    .HasForeignKey(d => d.Series_Id)
                    .HasConstraintName("FK_BOOK_ISPARTOFS_SERIES");
            });

            modelBuilder.Entity<BookAuthor>(entity =>
            {
                entity.HasKey(e => new { e.Author_Id, e.Book_Id })
                    .HasName("PK_BOOKAUTHOR");

                entity.HasOne(d => d.Author)
                    .WithMany(p => p.BookAuthor)
                    .HasForeignKey(d => d.Author_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOOKAUTH_WRITTENBY_AUTHOR");

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookAuthor)
                    .HasForeignKey(d => d.Book_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOOKAUTH_AUTHOROF_BOOK");
            });

            modelBuilder.Entity<BookEdition>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.ImageUrl).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.HasOne(d => d.Publisher)
                    .WithMany(p => p.BookEdition)
                    .HasForeignKey(d => d.Publisher_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOOKEDIT_BYPUBLISH_PUBLISHE");
            });

            modelBuilder.Entity<BookInReadingChallange>(entity =>
            {
                entity.HasKey(e => new { e.Book_Id, e.BookIssue_Id, e.ReadingChallange_Id })
                    .HasName("PK_BOOKINREADINGCHALLANGE");

                entity.Property(e => e.UserComment).IsUnicode(false);

                entity.HasOne(d => d.ReadingChallange)
                    .WithMany(p => p.BookInReadingChallange)
                    .HasForeignKey(d => d.ReadingChallange_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOOKINRE_BOOKINCHA_READINGC");

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookInReadingChallange)
                    .HasForeignKey(d => new { d.Book_Id, d.BookIssue_Id })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOOKINRE_CHALLANGE_BOOKISSU");
            });

            modelBuilder.Entity<BookIssue>(entity =>
            {
                entity.HasKey(e => new { e.Book_Id, e.Id })
                    .HasName("PK_BOOKISSUE");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.ISBN).IsUnicode(false);

                entity.Property(e => e.ISBN13).IsUnicode(false);

                entity.Property(e => e.ImageUrl).IsUnicode(false);

                entity.Property(e => e.Summary).IsUnicode(false);

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookIssue)
                    .HasForeignKey(d => d.Book_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOOKISSU_ISSUEOF_BOOK");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.BookIssue)
                    .HasForeignKey(d => d.Language_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOOKISSU_LANGUAGEO_LANGUAGE");

                entity.HasOne(d => d.Publisher)
                    .WithMany(p => p.BookIssue)
                    .HasForeignKey(d => d.Publisher_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOOKISSU_PUBLISHED_PUBLISHE");
            });

            modelBuilder.Entity<BookIssueInEdition>(entity =>
            {
                entity.HasKey(e => new { e.Book_Id, e.BookIssue_id, e.Edition_Id })
                    .HasName("PK_BOOKISSUEINEDITION");

                entity.HasOne(d => d.Edition)
                    .WithMany(p => p.BookIssueInEdition)
                    .HasForeignKey(d => d.Edition_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOOKISSU_EDITIONOF_BOOKEDIT");

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookIssueInEdition)
                    .HasForeignKey(d => new { d.Book_Id, d.BookIssue_id })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOOKISSU_ISSUEINED_BOOKISSU");
            });

            modelBuilder.Entity<BookOnBookshelf>(entity =>
            {
                entity.HasKey(e => new { e.User_Id, e.BookShelf_Id, e.Book_Id, e.BookIssue_Id })
                    .HasName("PK_BOOKONBOOKSHELF");

                entity.Property(e => e.Comment).IsUnicode(false);

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookOnBookshelf)
                    .HasForeignKey(d => new { d.Book_Id, d.BookIssue_Id })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOOKONBO_BOOKONBOO_BOOKISSU");

                entity.HasOne(d => d.UserBookShelf)
                    .WithMany(p => p.BookOnBookshelf)
                    .HasForeignKey(d => new { d.User_Id, d.BookShelf_Id })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOOKONBO_ONBOOKSHE_USERBOOK");
            });

            modelBuilder.Entity<BookTag>(entity =>
            {
                entity.HasKey(e => new { e.Tag_Id, e.Book_Id })
                    .HasName("PK_BOOKTAG");

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookTag)
                    .HasForeignKey(d => d.Book_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOOKTAG_TAGGEDBOO_BOOK");

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.BookTag)
                    .HasForeignKey(d => d.Tag_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOOKTAG_BOOKHASTA_TAG");
            });

            modelBuilder.Entity<CommentReaction>(entity =>
            {
                entity.HasKey(e => new { e.User_Id, e.Book_Id, e.BookIssue_Id, e.Review_User_Id, e.CommentAuthor_Id })
                    .HasName("PK_COMMENTREACTION");

                entity.HasOne(d => d.ReviewComment)
                    .WithMany(p => p.CommentReaction)
                    .HasForeignKey(d => new { d.Book_Id, d.BookIssue_Id, d.Review_User_Id, d.CommentAuthor_Id })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_COMMENTR_REACTIONO_REVIEWCO");
            });

            modelBuilder.Entity<CurrentlyReading>(entity =>
            {
                entity.HasKey(e => new { e.User_Id, e.Book_Id, e.BookIssue_Id })
                    .HasName("PK_CURRENTLYREADING");

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.CurrentlyReading)
                    .HasForeignKey(d => new { d.Book_Id, d.BookIssue_Id })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CURRENTL_CURRENTLY_BOOKISSU");
            });

            modelBuilder.Entity<Language>(entity =>
            {
                entity.Property(e => e.EnglishName).IsUnicode(false);

                entity.Property(e => e.LocalizationCode).IsUnicode(false);

                entity.Property(e => e.NativeName).IsUnicode(false);
            });

            modelBuilder.Entity<Publisher>(entity =>
            {
                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.ImageUrl).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<Read>(entity =>
            {
                entity.HasKey(e => new { e.Book_Id, e.BookIssue_Id, e.User_Id })
                    .HasName("PK_READ");

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.Read)
                    .HasForeignKey(d => new { d.Book_Id, d.BookIssue_Id })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_READ_READBOOK_BOOKISSU");
            });

            modelBuilder.Entity<ReadingChallange>(entity =>
            {
                entity.HasOne(d => d.Year)
                    .WithMany(p => p.ReadingChallange)
                    .HasForeignKey(d => d.Year_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_READINGC_CHALLANGE_YEAR");
            });

            modelBuilder.Entity<Review>(entity =>
            {
                entity.HasKey(e => new { e.Book_Id, e.BookIssue_Id, e.User_Id })
                    .HasName("PK_REVIEW");

                entity.Property(e => e.Review1).IsUnicode(false);

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.Review)
                    .HasForeignKey(d => new { d.Book_Id, d.BookIssue_Id })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_REVIEW_REVIEWOF_BOOKISSU");
            });

            modelBuilder.Entity<ReviewComment>(entity =>
            {
                entity.HasKey(e => new { e.Book_Id, e.BookIssue_Id, e.Review_User_Id, e.CommentAuthor_Id })
                    .HasName("PK_REVIEWCOMMENT");

                entity.Property(e => e.Content).IsUnicode(false);

                entity.HasOne(d => d.Review)
                    .WithMany(p => p.ReviewComment)
                    .HasForeignKey(d => new { d.Book_Id, d.BookIssue_Id, d.Review_User_Id })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_REVIEWCO_COMMENTON_REVIEW");
            });

            modelBuilder.Entity<ReviewReaction>(entity =>
            {
                entity.HasKey(e => new { e.User_Id, e.Book_Id, e.BookIssue_Id, e.Review_User_Id })
                    .HasName("PK_REVIEWREACTION");

                entity.HasOne(d => d.Review)
                    .WithMany(p => p.ReviewReaction)
                    .HasForeignKey(d => new { d.Book_Id, d.BookIssue_Id, d.Review_User_Id })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_REVIEWRE_REACTEDON_REVIEW");
            });

            modelBuilder.Entity<Series>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.ImageUrl).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<Tag>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<UserBookShelf>(entity =>
            {
                entity.HasKey(e => new { e.User_Id, e.Id })
                    .HasName("PK_USERBOOKSHELF");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Descripton).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<WantToRead>(entity =>
            {
                entity.HasKey(e => new { e.Book_Id, e.BookIsse_Id, e.User_Id })
                    .HasName("PK_WANTTOREAD");

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.WantToRead)
                    .HasForeignKey(d => new { d.Book_Id, d.BookIsse_Id })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WANTTORE_WANTTOREA_BOOKISSU");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}